#!/usr/bin/env python3

import sys
import os
import stat
import glob
import subprocess
import epics
import sip

from enum import Enum
from PyQt5 import QtWidgets, QtCore, QtGui, uic
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

binPath = os.path.dirname(os.path.realpath(__file__)) + os.path.sep
sharePath = binPath + "../share/imblSlits/"
sys.path.append(sharePath)

from slits import *


def is_float(str):
  try:
    float(str)
    return True
  except ValueError:
    return False


class BLmode(QObject):

  class Encl(Enum):
    NONE = 'OFF'
    MOD1 = '1'
    MOD2 = '2'
    MOD3 = '3'

  m1PV = epics.PV('SR08ID01PSS01:HU01B_ENABLE_STS')
  m2PV = epics.PV('SR08ID01PSS01:HU02B_ENABLE_STS')
  m3PV = epics.PV('SR08ID01PSS01:HU03B_ENABLE_STS')

  class Shut(Enum):
    NONE = 'Unknown'
    PINK = 'Pink'
    MONO = 'Mono'
    MRTS = 'Mrt'

  pinkPV = epics.PV('SR08ID01PSS01:HU01A_NOM_SHT_MOD_PERM_STS')
  mrtsPV = epics.PV('SR08ID01PSS01:HU01A_FST_SHT_MOD_PERM_STS')
  monoPV = epics.PV('SR08ID01PSS01:HU01A_MON_SHT_MOD_PERM_STS')

  updated = pyqtSignal(str)


  def __init__(self):
    super(BLmode, self).__init__()

    def onUpdate(**kw):
      self.updated.emit(str(self))
    self.m1PV.add_callback(onUpdate)
    self.m2PV.add_callback(onUpdate)
    self.m3PV.add_callback(onUpdate)
    self.pinkPV.add_callback(onUpdate)
    self.monoPV.add_callback(onUpdate)
    self.mrtsPV.add_callback(onUpdate)

  def __str__(self):
    return self.encl().value+'-'+self.shut().value


  def encl(self):
    if self.m3PV.get(timeout=0) is None or \
       self.m2PV.get(timeout=0) is None or \
       self.m1PV.get(timeout=0) is None :
      return self.Encl.NONE
    elif self.m3PV.value:
      return self.Encl.MOD3
    elif self.m2PV.value:
      return self.Encl.MOD2
    elif self.m1PV.value:
      return self.Encl.MOD1
    else:
      return self.Encl.NONE


  def shut(self):
    if self.pinkPV.get(timeout=0) is None or \
       self.monoPV.get(timeout=0) is None or \
       self.mrtsPV.get(timeout=0) is None or \
       1 != self.pinkPV.value + self.monoPV.value + self.mrtsPV.value:
      return self.Shut.NONE
    elif self.pinkPV.value:
      return self.Shut.PINK
    elif self.monoPV.value:
      return self.Shut.MONO
    elif self.mrtsPV.value:
      return self.Shut.MRTS
    else:
      return self.Shut.NONE


class MainWindow(QMainWindow):

  slitsExt = 'slits.sh'
  blMode = BLmode()

  def __init__(self):
    super(MainWindow, self).__init__()

    self.localDataDir   = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)
    os.makedirs(self.localDataDir, exist_ok=True)
    self.ui = uic.loadUi(sharePath + 'imblSlits.ui', self)

    self.layoutsOnStart = {}
    for lay in self.ui.findChildren(QLayout):
      self.layoutsOnStart[lay] = (lay.contentsMargins(), lay.spacing())
    
    prst = self.ui.preset
    for ddir in QStandardPaths.standardLocations(QStandardPaths.AppDataLocation):
      for cfg in glob.glob(ddir + os.path.sep + '*.' + self.slitsExt):
        ttl = os.path.basename(cfg)[:-len(self.slitsExt)-1]
        prst.addItem(ttl, cfg)
        prst.setItemData(prst.count()-1, cfg, Qt.ToolTipRole)
    prst.currentIndexChanged.connect(lambda idx: \
      prst.setToolTip(prst.itemData(idx, Qt.ToolTipRole)))
      
    self.ui.papa .face.set('papa.png' , 'Papa bear')
    self.ui.mama .face.set('mama.png' , 'Mama bear')
    self.ui.baby .face.set('baby.png' , 'Baby bear')
    self.ui.panda.face.set('panda.png', 'HHLS'     )

    self.ui.xrayFace.set('masha.png', 'Config')
    self.ui.xrayFace.setMinimumSize(self.ui.panda.face.minimumSize())
    self.ui.layXrayFaceTab.layout().addWidget(self.ui.xrayFace)
    self.ui.panda.visual.heightChanged.connect(self.ui.fakeSlitsVis.setMinimumHeight)      

    for slt in Slits.family:
      slt.willMoveNow.connect(self.onBearMove)
      slt.changedConnection.connect(self.onStatusChange)
      slt.changedMotion    .connect(self.onStatusChange)
      slt.changedLimits    .connect(self.onStatusChange)
      slt.knowTheFamily()
      self.ui.xrayFace.labBut.toggled.connect(slt.face.labBut.setChecked)

    tab = self.ui.tabWidget.tabBar()
    tab.setExpanding(True)
    for itab in range(0, tab.count()):
      slt = self.ui.tabWidget.widget(itab).findChild(Slits)
      if slt:
        slt.layFaceTab.layout().addWidget(slt.face)
        tab.setTabButton(itab, QTabBar.LeftSide, slt.layFaceTab)

    self.showcfg = QPushButton(QtGui.QIcon(sharePath+'masha.png'), '', self)
    self.showcfg.clicked.connect(self.showConfig)
    self.ui.statusbar.addPermanentWidget(self.showcfg)
    self.showConfig(True)    

    self.ui.compact.toggled.connect(self.uiCompact)
    self.ui.viewTab.clicked.connect(lambda: self.uiModeSwap(True))
    self.ui.viewFam.clicked.connect(lambda: self.uiModeSwap(False))
    self.uiModeSwap(False)

    self.stopall = QPushButton('Stop all', self)
    for slt in Slits.family:
      self.stopall.clicked.connect(slt.stop.clicked.emit)
    self.ui.statusbar.addPermanentWidget(self.stopall,1)

    self.ui.statusbar.addPermanentWidget(QLabel('Mode: ', self))
    modeLabel = QLabel(str(self.blMode), self)
    self.blMode.updated.connect(modeLabel.setText)
    self.ui.statusbar.addPermanentWidget(modeLabel)
    self.blMode.updated.connect(self.updateBase)
    QTimer.singleShot(0, self.updateBase)

    self.ui.save.clicked.connect(self.onSave)
    self.ui.load.clicked.connect(self.onLoad)

    self.ui.goWhite.clicked.connect(self.moveToBlMode)
    self.ui.goMono .clicked.connect(self.moveToBlMode)

    self.ui.panda.setDistance(14)
    self.ui.panda.setMotors({MR.VP : 'SR08ID01SLW01:VPOS',
                             MR.VS : 'SR08ID01SLW01:VOPEN',
                             MR.LF : 'SR08ID01SLW01:RIGHT', # left/right are swapped
                             MR.RT : 'SR08ID01SLW01:LEFT'})

    self.ui. baby.setDistance(20)
    self.ui. baby.setMotors({MR.VP : 'SR08ID01SLM12:VCENTRE',
                             MR.VS : 'SR08ID01SLM12:VSIZE',
                             MR.HP : 'SR08ID01SLM12:HCENTRE',
                             MR.HS : 'SR08ID01SLM12:HSIZE'},
                            'SR08ID01SLM12:VCENTRE',
                            [(MR.LF, 'SR08ID01SLM12:IN'),
                             (MR.RT, 'SR08ID01SLM12:OUT'),
                             (MR.BT, 'SR08ID01SLM12:BOT'),
                             (MR.TP, 'SR08ID01SLM12:TOP')])

    self.ui. mama.setDistance(25)
    self.ui. mama.setMotors({MR.VP : 'SR08ID01SLM21:Z',
                             MR.VS : 'SR08ID01SLM21:ZGAP',
                             MR.HP : 'SR08ID01SLM21:Y',
                             MR.HS : 'SR08ID01SLM21:YGAP'},
                            'SR08ID01TBL21:Z')

    self.ui.papa.setDistance(136)
    self.ui.papa.setMotors(  {MR.VP : 'SR08ID01SLM03:ZCENTRE',
                              MR.VS : 'SR08ID01SLM03:ZGAP',
                              MR.HP : 'SR08ID01SLM03:YCENTRE',
                              MR.HS : 'SR08ID01SLM03:YGAP'},
                             'SR08ID01SLM03:ZCENTRE',
                             [(MR.LF, 'SR08ID01SLM03:LEFT'),
                              (MR.RT, 'SR08ID01SLM03:RIGHT'),
                              'SR08ID01SLM03:ROTARYARM'])


  @pyqtSlot()
  def updateBase(self):
    for slt in Slits.family:
      slt.setBase(20 if self.blMode.shut() == BLmode.Shut.MONO else 0)


  def moveToBlMode(self):
    if self.sender() not in (self.ui.goWhite, self.ui.goMono):
      return
    for slt in Slits.family:
      if slt.isActive() and slt.baseMotor is not None:
        slt.baseMotor.goUserPosition(0 if self.sender() is self.ui.goWhite else 20)

  
  @pyqtSlot()
  def updateSizes(self):
    for i in range(0, 10):
      QApplication.processEvents()
    QTimer.singleShot(0, (lambda: self.resize(self.minimumSizeHint())))


  @pyqtSlot()
  def showConfig(self, toShow=None):
    tbwg = self.ui.tabWidget
    if toShow is None:
      toShow = tbwg.widget(tbwg.count()-1) is not self.ui.configTab
    self.showcfg.setText('Hide config' if toShow else 'Show config')
    if toShow:
      tbwg.addTab(self.ui.configTab, '')
      # Have to create and use this new widget as home for
      # self.ui.layXrayFaceTab instead of using it itself
      # because it is always deleted when removing tab - even if reparented
      layXrayFaceTab = QWidget()
      QVBoxLayout(layXrayFaceTab).setContentsMargins(0, 0, 0, 0)
      layXrayFaceTab.layout().addWidget(self.ui.layXrayFaceTab)
      tbwg.tabBar().setTabButton(
        tbwg.count()-1,  QTabBar.LeftSide, layXrayFaceTab)
      tbwg.setCurrentWidget(self.ui.configTab)
    else:
      self.ui.config.layout().addWidget(self.ui.layXrayFaceTab)  # to keep from delete
      tbwg.removeTab(tbwg.count()-1)
    self.configFam.setVisible(toShow)
    QTimer.singleShot(0, self.updateSizes)


  @pyqtSlot(bool)
  def uiModeSwap(self, toTab):

    (self.ui.viewTab if toTab else self.ui.viewFam).setChecked(True)
    self.ui.famWidget.setVisible(not toTab)
    self.ui.tabWidget.setVisible(toTab)

    wslt = 'Tab' if toTab else 'Fam'

    eval('self.ui.config'+wslt).layout().addWidget(self.ui.config)
    for slt in Slits.family:
      eval('self.ui.'+slt.objectName()+wslt).layout().addWidget(slt)
      eval('slt.layFace'+wslt).layout().addWidget(slt.face)

    self.ui.fakeSlitsVis.setVisible(not toTab)
    self.ui.layXrayFaceFam.setVisible(not toTab)
    layXF = eval('self.ui.layXrayFace'+wslt)
    layXF.layout().addWidget(self.ui.xrayFace)
    layXF.setMinimumSize(self.ui.xrayFace.minimumSize())
    QTimer.singleShot(0, self.updateSizes)


  @pyqtSlot(bool)
  def uiCompact(self, cmp):
    for lay, stopt in self.layoutsOnStart.items():
      if not sip.isdeleted(lay):
        lay.setContentsMargins(QMargins() if cmp else stopt[0])
        lay.setSpacing(0 if cmp else stopt[1])
    QTimer.singleShot(0, self.updateSizes)


  @pyqtSlot(dict, dict)
  def onBearMove(self, orig, dest):
    for slt in Slits.family:
      if slt is not self.sender() and slt.isActive():
        sorig = slt.posRBV()
        sdest = {rol : sorig[rol] + dest[rol] - orig[rol] for rol in MR}
        slt.onMoveOrder(sdest)


  @pyqtSlot()
  def onStatusChange(self):
    connected = True
    moving = False
    limit = False
    for slt in Slits.family:
      connected &= slt.isConnected
      moving |= slt.isMoving
      limit |= slt.isOnLimit
    self.ui.goWhite.setEnabled(connected and not moving)
    self.ui.goMono .setEnabled(connected and not moving)
    self.ui.save   .setEnabled(connected and not moving)
    self.ui.load   .setEnabled(connected and not moving)
    self.stopall.setEnabled(moving)
    self.stopall.setStyleSheet('background-color: rgb(128, 0, 0);' if moving else '')
    
  
  def _fileSaveLoad(self, fileName, forsave):
    prst = self.ui.preset
    if fileName is not None:
      return fileName
    if prst.currentData():
      if not forsave:
        return prst.currentData()
      ovwr = QMessageBox.warning(self, 'Overwrite file?',
        'The file "' + prst.currentData() + '" already exists. Do you wish to overwrite it?',
        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
        QMessageBox.StandardButton.No)
      return prst.currentData() if ovwr == QMessageBox.StandardButton.Yes else None

    dialDir = self.fileDir if hasattr(self, 'fileDir') else self.localDataDir
    getSL = QFileDialog.getSaveFileName \
            if forsave else \
            QFileDialog.getOpenFileName            
    dialTitle = ('Save' if forsave else 'Load') + ' configuration'
    fileName = getSL(self, dialTitle, dialDir,
                     filter='Slits (*.'+self.slitsExt+');;All Files (*)')[0]

    if not fileName:
      return None
    self.fileDir = os.path.dirname(fileName)
    if -1 == prst.findData(fileName):
      ttl = os.path.basename(fileName)[:-len(self.slitsExt)-1]
      prst.addItem(ttl, fileName)
      prst.setItemData(prst.count()-1, fileName, Qt.ToolTipRole)
      prst.setCurrentIndex(prst.count()-1)
    return fileName


  @pyqtSlot()
  def onSave(self, fileName=None):

    fileName = self._fileSaveLoad(fileName, True)
    if not fileName:
      return
    
    cfg = None
    try:
      cfg = open(fileName, 'w')
    except: 
      QMessageBox.warning(self, '', 'Failed to open file\n' + fileName)
      return
    
    cfg.write('#!/bin/bash\n\n')

    addMot = lambda mot: cfg.write('caput %s %f\n' % (mot.getPv(), mot.getUserPosition()))
    for slt in Slits.family:
      preact = '' if slt.isActive() else '# '
      for mot in slt.motors.values():
        cfg.write(preact)
        addMot(mot)
      if slt.baseMotor and slt.baseMotor not in slt.motors.values():
        cfg.write(preact)
        addMot(slt.baseMotor)
    
    cfg.write('\n')
    cfg.write('if [ "$SLITSLOADCFG" == true ] ; then\n')  
    cfg.write('  echo %s\n' % ('UITAB' if self.ui.viewTab.isChecked() else 'UIALL'))
    cfg.write('  echo %s\n' % ('UICOMPACT' if self.ui.compact.isChecked() else 'UINORMAL'))
    cfg.write('fi\n')

    cfg.close()
    os.chmod(fileName, os.stat(fileName).st_mode | stat.S_IEXEC)
    

  @pyqtSlot()
  def onLoad(self, fileName=None):

    fileName = self._fileSaveLoad(fileName, False)
    if not fileName:
      return
    
    os.environ["SLITSLOADCFG"] = "true"
    self.ui.load.setEnabled(False)
    ldout = subprocess.run(fileName, stdout=subprocess.PIPE, universal_newlines=True).stdout
    self.ui.load.setEnabled(True)

    self.uiModeSwap('UITAB' in ldout)
    self.uiCompact('UICOMPACT' in ldout)

    for slt in Slits.family:
      active = True
      for mot in slt.motors.values():
        active &= mot.getPv() in ldout
      slt.setActive(active)



app = QApplication(sys.argv)

my_mainWindow = MainWindow()
my_mainWindow.show()

sys.exit(app.exec_())
